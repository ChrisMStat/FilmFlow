[{"/Users/chrisstatton/Documents/School/Software_Engineering/FilmFlow/FilmFlow/src/index.js":"1","/Users/chrisstatton/Documents/School/Software_Engineering/FilmFlow/FilmFlow/src/App.js":"2","/Users/chrisstatton/Documents/School/Software_Engineering/FilmFlow/FilmFlow/src/NavMenu.js":"3","/Users/chrisstatton/Documents/School/Software_Engineering/FilmFlow/FilmFlow/src/login.component.js":"4","/Users/chrisstatton/Documents/School/Software_Engineering/FilmFlow/FilmFlow/src/signup.component.js":"5","/Users/chrisstatton/Documents/School/Software_Engineering/FilmFlow/FilmFlow/src/UserProfile.js":"6","/Users/chrisstatton/Documents/School/Software_Engineering/FilmFlow/FilmFlow/src/AboutUs.js":"7","/Users/chrisstatton/Documents/School/Software_Engineering/FilmFlow/FilmFlow/src/MovieRowsPage.js":"8","/Users/chrisstatton/Documents/School/Software_Engineering/FilmFlow/FilmFlow/src/requests.js":"9","/Users/chrisstatton/Documents/School/Software_Engineering/FilmFlow/FilmFlow/src/withRouter.js":"10","/Users/chrisstatton/Documents/School/Software_Engineering/FilmFlow/FilmFlow/src/UserRow.js":"11","/Users/chrisstatton/Documents/School/Software_Engineering/FilmFlow/FilmFlow/src/UserDislikedRow.js":"12","/Users/chrisstatton/Documents/School/Software_Engineering/FilmFlow/FilmFlow/src/Row.js":"13","/Users/chrisstatton/Documents/School/Software_Engineering/FilmFlow/FilmFlow/src/SearchRow.js":"14","/Users/chrisstatton/Documents/School/Software_Engineering/FilmFlow/FilmFlow/src/axios.js":"15","/Users/chrisstatton/Documents/School/Software_Engineering/FilmFlow/FilmFlow/src/RecRow.js":"16","/Users/chrisstatton/Documents/School/Software_Engineering/FilmFlow/FilmFlow/src/Recommendation.js":"17"},{"size":256,"mtime":1669093662669,"results":"18","hashOfConfig":"19"},{"size":1150,"mtime":1670023578835,"results":"20","hashOfConfig":"19"},{"size":2650,"mtime":1670015786452,"results":"21","hashOfConfig":"19"},{"size":2597,"mtime":1670015031804,"results":"22","hashOfConfig":"19"},{"size":2692,"mtime":1670015167202,"results":"23","hashOfConfig":"19"},{"size":329,"mtime":1670015642943,"results":"24","hashOfConfig":"19"},{"size":425,"mtime":1669924334597,"results":"25","hashOfConfig":"19"},{"size":1117,"mtime":1670015744456,"results":"26","hashOfConfig":"19"},{"size":488,"mtime":1670015129877,"results":"27","hashOfConfig":"19"},{"size":388,"mtime":1670014917854,"results":"28","hashOfConfig":"19"},{"size":4383,"mtime":1670015205173,"results":"29","hashOfConfig":"19"},{"size":4389,"mtime":1670023540237,"results":"30","hashOfConfig":"19"},{"size":4345,"mtime":1670014961954,"results":"31","hashOfConfig":"19"},{"size":4551,"mtime":1670023226816,"results":"32","hashOfConfig":"19"},{"size":183,"mtime":1670015015891,"results":"33","hashOfConfig":"19"},{"size":8790,"mtime":1670023403067,"results":"34","hashOfConfig":"19"},{"size":3812,"mtime":1670023426707,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"1vabcj1",{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},"/Users/chrisstatton/Documents/School/Software_Engineering/FilmFlow/FilmFlow/src/index.js",[],[],[],"/Users/chrisstatton/Documents/School/Software_Engineering/FilmFlow/FilmFlow/src/App.js",[],[],"/Users/chrisstatton/Documents/School/Software_Engineering/FilmFlow/FilmFlow/src/NavMenu.js",[],[],"/Users/chrisstatton/Documents/School/Software_Engineering/FilmFlow/FilmFlow/src/login.component.js",["96","97","98"],[],"/* Login Page */\n\nimport React, { Component } from \"react\";\nimport {withRouter} from './withRouter';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: \"\",\n      password: \"\",\n      movID: \"\",\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    const { email, password, movID } = this.state;\n\n    localStorage.setItem(\"email\", email);\n    localStorage.setItem(\"password\", password);\n    fetch(\"http://localhost:5555/login\", {\n      method: \"POST\",\n      crossDomain: true,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n      body: JSON.stringify({\n        email,\n        password,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data, \"userRegister\");\n        if (data.status == \"ok\") {\n          alert(\"login successful\");\n          window.localStorage.setItem(\"token\", data.data);\n            this.props.navigate('/movies');\n        }\n      });\n  }\n\n  render() {\n    return (\n      <form className = \"form\" onSubmit={this.handleSubmit}>\n        <h3 className = \"login-signin\">Sign In</h3>\n\n        <div className=\"mb-3\">\n          <label className = \"login-header\">Email address</label>\n          <input\n            type=\"email\"\n            className=\"form-control\"\n            placeholder=\"Enter email\"\n            onChange={(e) => this.setState({ email: e.target.value })}\n          />\n        </div>\n\n        <div className=\"mb-3\">\n          <label className = \"login-header\">Password</label>\n          <input\n            type=\"password\"\n            className=\"form-control\"\n            placeholder=\"Enter password\"\n            onChange={(e) => this.setState({ password: e.target.value })}\n          />\n        </div>\n\n        <div className=\"mb-3\">\n          <div className=\"custom-control custom-checkbox\">\n            <input\n              type=\"checkbox\"\n              className=\"custom-control-input\"\n              id=\"customCheck1\"\n            />\n            <label className=\"custom-control-label\" htmlFor=\"customCheck1\">\n              Remember me\n            </label>\n          </div>\n        </div>\n\n        <div className=\"d-grid\">\n          <button type=\"submit\" className=\"btn btn-primary\">\n            Submit\n          </button>\n        </div>\n        <p className=\"forgot-password text-right\">\n          Forgot <a href=\"#\">password?</a>\n        </p>\n      </form>\n    );\n  }\n}\n\nexport default withRouter(Login);","/Users/chrisstatton/Documents/School/Software_Engineering/FilmFlow/FilmFlow/src/signup.component.js",[],[],"/Users/chrisstatton/Documents/School/Software_Engineering/FilmFlow/FilmFlow/src/UserProfile.js",["99"],[],"/* User's Profile Page */\n\nimport React from \"react\";\nimport UserRow from \"./UserRow\";\nimport UserDislikedRow from \"./UserDislikedRow\";\nimport RecRow from \"./RecRow\";\n\nexport default function (props) {\n    return (\n\n        <div>\n            <UserRow/>\n            <UserDislikedRow/>\n            <RecRow/>\n        </div>\n    );\n}","/Users/chrisstatton/Documents/School/Software_Engineering/FilmFlow/FilmFlow/src/AboutUs.js",["100"],[],"import React from 'react';\n\nexport default function (props) {\n    return (\n        <div className = \"about-us-page\">\n            <p className= \"about_headers\">Created By:</p>\n            <p className=\"about_devduo\">DevDuo</p>\n            <p className= \"about_headers\">Members:</p>\n            <p className=\"about_members\">Weston Winkeljohn</p>\n            <p className=\"about_members\">Chris Statton</p>\n        </div>\n    )\n}","/Users/chrisstatton/Documents/School/Software_Engineering/FilmFlow/FilmFlow/src/MovieRowsPage.js",["101"],[],"/* Used to hold all of the movie rows */\n\nimport SearchRow from \"./SearchRow\";\nimport Row from \"./Row\";\nimport requests from \"./requests\";\nimport React, { useState } from \"react\";\n\nexport default function (props) {\n  const [query, setQuery] = useState(\"\");\n\n  const onChange = (e) => {\n    e.preventDefault();\n    setQuery(e.target.value);\n    console.log(query);\n  };\n\n  return (\n    <div>\n      <div className=\"search_bar\">\n        <h2 className=\"category-header\">Search</h2>\n        <input\n          type=\"text\"\n          placeholder={\"Search Movies\"}\n          value={query}\n          onChange={onChange}\n          className=\"search_box\"\n        />\n      </div>\n      <SearchRow\n        className=\"search_row\"\n        fetchUrl={`/search/movie?api_key=518f0cf1333524b8ec0f30f5fb0b224a&query=${query}`}\n        isLargeRow\n      />\n      <Row title=\"Trending\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Action\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror\" fetchUrl={requests.fetchHorrorMovies} />\n    </div>\n  );\n}\n","/Users/chrisstatton/Documents/School/Software_Engineering/FilmFlow/FilmFlow/src/requests.js",[],[],"/Users/chrisstatton/Documents/School/Software_Engineering/FilmFlow/FilmFlow/src/withRouter.js",[],[],"/Users/chrisstatton/Documents/School/Software_Engineering/FilmFlow/FilmFlow/src/UserRow.js",["102","103"],[],"/* Row for the user's liked movie; displayed on their profile page */\r\n\r\nimport React, { Component } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nvar movie_all;\r\nvar movie_id = -1;\r\nvar movie_description = \"\";\r\nvar movie_name = \"\";\r\nvar movie_poster = \"\";\r\nconst API_IMG = \"https://image.tmdb.org/t/p/w200\";\r\n\r\nexport default class UserRow extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      movies: [],\r\n      show: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"http://localhost:5555/userInfo\", {\r\n      method: \"POST\",\r\n      crossDomain: true,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n      },\r\n      body: JSON.stringify({\r\n        token: localStorage.getItem(\"token\"),\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(data, \"userInfo\");\r\n        this.setState({ movies: data.data.movID });\r\n      });\r\n  }\r\n\r\n  RemoveMovie(id) {\r\n    var email = localStorage.getItem(\"email\"); //retrieve the email from local storage\r\n    var password = localStorage.getItem(\"password\"); //retrieve the password from local storage\r\n    var movID = id;\r\n\r\n    fetch(\"http://localhost:5555/deletemovie\", {\r\n      method: \"POST\",\r\n      crossDomain: true,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n      },\r\n\r\n      body: JSON.stringify({\r\n        email,\r\n        password,\r\n        movID,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(data, \"userMov\");\r\n        this.componentDidMount();\r\n      });\r\n    window.location.reload();       //refreshes page on click, its kind of obnoxious but it does function properly\r\n  }\r\n\r\n  render() {\r\n    const base_url = \"https://image.tmdb.org/t/p/original/\";\r\n    var title = \"Liked Movies\";\r\n    var isLargeRow = false;\r\n\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"category-header\">\r\n          <h2>{title}</h2>\r\n        </div>\r\n\r\n        <div className=\"row__posters\">\r\n          {this.state.movies.map((movie, index) => (\r\n            <>\r\n              <img\r\n                className={`row__poster  ${isLargeRow && \"row__posterLarge\"}`}\r\n                key={movie.id}\r\n                src={`${base_url}${\r\n                  isLargeRow ? movie.poster_path : movie.backdrop_path\r\n                }`}\r\n                alt={movie.name}\r\n                onClick={() => {\r\n                  this.componentDidMount();\r\n                  movie_all = movie;\r\n                  movie_id = movie.id;\r\n                  movie_name = movie.title;\r\n                  movie_description = movie.overview;\r\n                  movie_poster = API_IMG + movie.poster_path;\r\n                  this.setState({\r\n                    movies: this.state.movies,\r\n                    show: !this.state.show,\r\n                  });\r\n                }}\r\n              ></img>\r\n            </>\r\n          ))}\r\n        </div>\r\n\r\n        <Modal className=\"movie_popup\" show={this.state.show}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>\r\n              {\" \"}\r\n              <b>{movie_name}</b>{\" \"}\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <img className=\"img-fluid\" src={movie_poster}></img>\r\n            <p>\r\n              <b> Synopsis: </b> {movie_description}\r\n            </p>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              variant=\"secondary\"\r\n              onClick={() =>\r\n                this.setState({\r\n                  movies: this.state.movies,\r\n                  show: !this.state.show,\r\n                })\r\n              }\r\n            >\r\n              Close\r\n            </Button>\r\n            <Button\r\n              variant=\"warning\"\r\n              onClick={() => {\r\n                this.RemoveMovie(movie_all);\r\n                this.setState({\r\n                  movies: this.state.movies,\r\n                  show: !this.state.show,\r\n                });\r\n              }}\r\n            >\r\n              Unlike\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","/Users/chrisstatton/Documents/School/Software_Engineering/FilmFlow/FilmFlow/src/UserDislikedRow.js",[],[],"/Users/chrisstatton/Documents/School/Software_Engineering/FilmFlow/FilmFlow/src/Row.js",["104","105","106"],[],"/* Individual Movie Row */\r\n\r\nimport React, { useState, useEffect, Component } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\nvar movie_all;\r\nvar movie_id = -1;\r\nvar movie_description = \"\";\r\nvar movie_name = \"\";\r\nvar movie_poster = \"\";\r\nconst API_IMG = \"https://image.tmdb.org/t/p/w200\";\r\n\r\nfunction AddLikedMovie(id) {\r\n  var email = localStorage.getItem(\"email\"); //retrieve the email from local storage\r\n  var password = localStorage.getItem(\"password\"); //retrieve the password from local storage\r\n  var movID = id;\r\n\r\n  fetch(\"http://localhost:5555/addmovie\", {\r\n    method: \"POST\",\r\n    crossDomain: true,\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n    },\r\n\r\n    body: JSON.stringify({\r\n      email,\r\n      password,\r\n      movID,\r\n    }),\r\n  })\r\n    .then((res) => res.json())\r\n    .then((data) => {\r\n      console.log(data, \"userRegister\");\r\n    });\r\n  //window.location.reload();       //refreshes page on click, its kind of obnoxious but it does function properly\r\n}\r\n\r\nfunction AddDislikedMovie(id) {\r\n  var email = localStorage.getItem(\"email\"); //retrieve the email from local storage\r\n  var password = localStorage.getItem(\"password\"); //retrieve the password from local storage\r\n  var movID = id;\r\n\r\n  fetch(\"http://localhost:5555/addbadmovie\", {\r\n    method: \"POST\",\r\n    crossDomain: true,\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n    },\r\n\r\n    body: JSON.stringify({\r\n      email,\r\n      password,\r\n      movID,\r\n    }),\r\n  })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(data, \"userRegister\");\r\n      });\r\n  //window.location.reload();       //refreshes page on click, its kind of obnoxious but it does function properly\r\n}\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [show, setShow] = useState(false);\r\n  const handleClose = () => setShow(false);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      console.log(request.data.results);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  console.log(movies);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"category-header\">\r\n        <h2>{title}</h2>\r\n      </div>\r\n\r\n      <div className=\"row__posters\">\r\n        {movies.map((movie, index) => (\r\n          <>\r\n            <img\r\n              className={`row__poster  ${isLargeRow && \"row__posterLarge\"}`}\r\n              key={movie.id}\r\n              src={`${base_url}${\r\n                isLargeRow ? movie.poster_path : movie.backdrop_path\r\n              }`}\r\n              alt={movie.name}\r\n              onClick={() => {\r\n                movie_all = movie;\r\n                movie_id = movie.id;\r\n                movie_name = movie.title;\r\n                movie_description = movie.overview;\r\n                movie_poster = (API_IMG) + (movie.poster_path);\r\n                setShow(true);\r\n              }}\r\n            ></img>\r\n          </>\r\n        ))}\r\n      </div>\r\n\r\n      <Modal className = \"movie_popup\" show={show} onHide={handleClose} >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title> <b>{movie_name}</b> </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <img className = \"img-fluid\" src = {movie_poster}></img>\r\n          <p>\r\n            <b> Synopsis: </b> {movie_description}\r\n          </p>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"danger\" onClick={() => {\r\n            AddDislikedMovie(movie_all);\r\n            setShow(false);\r\n          }}>\r\n            Dislike\r\n          </Button>\r\n          <Button variant=\"info\" onClick={() => {\r\n            AddLikedMovie(movie_all);\r\n            setShow(false);\r\n          }}>\r\n            Like\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n    </div>\r\n  );\r\n}\r\nexport default Row;\r\n","/Users/chrisstatton/Documents/School/Software_Engineering/FilmFlow/FilmFlow/src/SearchRow.js",[],[],"/Users/chrisstatton/Documents/School/Software_Engineering/FilmFlow/FilmFlow/src/axios.js",[],[],"/Users/chrisstatton/Documents/School/Software_Engineering/FilmFlow/FilmFlow/src/RecRow.js",["107"],[],"/* Recommended movie row on User Profile page */\n\nimport React, {Component} from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\n\nvar movie_all;\nvar movie_id = -1;\nvar movie_description = \"\";\nvar movie_name = \"\";\nvar movie_poster = \"\";\nconst API_IMG = \"https://image.tmdb.org/t/p/w200\";\n\nvar GenreVariable = 0;\nvar randompage = Math.floor(Math.random() * 200);\nvar liked_movies = [];\n\nexport default class RecRow extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            movies: [],\n            show: false,\n        };\n    }\n\n    componentDidMount() {\n        fetch(\"http://localhost:5555/userInfo\", {\n            method: \"POST\",\n            crossDomain: true,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n                \"Access-Control-Allow-Origin\": \"*\",\n            },\n            body: JSON.stringify({\n                token: localStorage.getItem(\"token\"),\n            }),\n        })\n            .then((res) => res.json())\n            .then((data) => {\n                console.log(data, \"userInfo\");\n                liked_movies = data.data.movID;\n                this.countGenres();\n            });\n    }\n\n    // counting genre occurrence\n    countGenres()\n    {\n        const genres = [];\n        for (var i = 0; i < liked_movies.length; i++) {\n            var list = liked_movies[i].genre_ids;\n            for (var j = 0; j < list.length; j++) {\n\n                var existingValue = genres.find(function (value) {\n                    return value.label === list[j]\n                });\n\n                if (!existingValue) {\n                    genres.push(\n                        {\n                            label: list[j],\n                            count: 1\n                        }\n                    );\n                } else {\n                    existingValue.count++;\n                }\n            }\n        }\n\n        // finding most frequent genre\n        let highest_genre = genres[0];\n        for (var k = 0; k < genres.length; k++)\n        {\n            for (var l = k; l < genres.length; l++)\n            {\n                if (genres[l].count > genres[k].count && genres[l].count > highest_genre.count)\n                {\n                    highest_genre = genres[l];\n                }\n            }\n        }\n\n        // setting genre variable to most favored genre\n        GenreVariable = highest_genre.label;\n        console.log(\"MOST LIKED GENRE ID: \" + GenreVariable);\n\n        // url for random recommended movies within the favored genre\n        let fetchUrl=`https://api.themoviedb.org/3/discover/movie?api_key=518f0cf1333524b8ec0f30f5fb0b224a&include_adult=false&with_genres=${GenreVariable}&page=${randompage}`;\n        fetch(fetchUrl).then(res => res.json()).then(data => {\n\n            this.setState({ movies: data.results });\n        })\n    }\n\n    AddLikedMovie(id) {\n        var email = localStorage.getItem(\"email\"); //retrieve the email from local storage\n        var password = localStorage.getItem(\"password\"); //retrieve the password from local storage\n        var movID = id;\n\n        fetch(\"http://localhost:5555/addmovie\", {\n            method: \"POST\",\n            crossDomain: true,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n                \"Access-Control-Allow-Origin\": \"*\",\n            },\n\n            body: JSON.stringify({\n                email,\n                password,\n                movID,\n            }),\n        })\n            .then((res) => res.json())\n            .then((data) => {\n                console.log(data, \"userRegister\");\n            });\n        window.location.reload();       //refreshes page on click, its kind of obnoxious but it does function properly\n    }\n\n    AddDislikedMovie(id) {\n        var email = localStorage.getItem(\"email\"); //retrieve the email from local storage\n        var password = localStorage.getItem(\"password\"); //retrieve the password from local storage\n        var movID = id;\n\n        fetch(\"http://localhost:5555/addbadmovie\", {\n            method: \"POST\",\n            crossDomain: true,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n                \"Access-Control-Allow-Origin\": \"*\",\n            },\n\n            body: JSON.stringify({\n                email,\n                password,\n                movID,\n            }),\n        })\n            .then((res) => res.json())\n            .then((data) => {\n                console.log(data, \"userRegister\");\n            });\n        window.location.reload();       //refreshes page on click, its kind of obnoxious but it does function properly\n    }\n\n    render() {\n        const base_url = \"https://image.tmdb.org/t/p/original/\";\n        var title = \"Recommended Movies\";\n        var isLargeRow = true;\n\n        return (\n            <div className=\"row\">\n                <div className=\"category-header\">\n                    <h2>{title}</h2>\n                </div>\n\n                <div className=\"row__posters\">\n                    {this.state.movies.slice(0,3).map((movie, index) => (\n                        <>\n                            <img\n                                className={`row__poster  ${isLargeRow && \"row__posterLarge\"}`}\n                                key={movie.id}\n                                src={`${base_url}${\n                                    isLargeRow ? movie.poster_path : movie.backdrop_path\n                                }`}\n                                alt={movie.name}\n                                onClick={() => {\n                                    this.componentDidMount();\n                                    movie_all = movie;\n                                    movie_id = movie.id;\n                                    movie_name = movie.title;\n                                    movie_description = movie.overview;\n                                    movie_poster = API_IMG + movie.poster_path;\n                                    this.setState({\n                                        movies: this.state.movies,\n                                        show: !this.state.show,\n                                    });\n                                }}\n                            ></img>\n                        </>\n                    ))}\n                </div>\n\n                <Modal className=\"movie_popup\" show={this.state.show}>\n                    <Modal.Header closeButton>\n                        <Modal.Title> <b>{movie_name}</b> </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <img className = \"img-fluid\"\n                             key = {movie_id}\n                             src = {movie_poster}\n                             alt = {movie_name}\n                        >\n\n                        </img>\n                        <p>\n                            <b> Synopsis: </b> {movie_description}\n                        </p>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button\n                            variant=\"secondary\"\n                            onClick={() =>\n                                this.setState({\n                                    movies: this.state.movies,\n                                    show: !this.state.show,\n                                })\n                            }\n                        >\n                            Close\n                        </Button>\n                        <Button\n                            variant=\"warning\"\n                            onClick={() => {\n                                this.AddDislikedMovie(movie_all);\n                                this.setState({\n                                    movies: this.state.movies,\n                                    show: !this.state.show,\n                                });\n                            }}\n                        >\n                            Dislike\n                        </Button>\n                        <Button\n                            variant=\"info\"\n                            onClick={() => {\n                                this.AddLikedMovie(movie_all);\n                                this.setState({\n                                    movies: this.state.movies,\n                                    show: !this.state.show,\n                                });\n                            }}\n                        >\n                            Like\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </div>\n        );\n    }\n}\n","/Users/chrisstatton/Documents/School/Software_Engineering/FilmFlow/FilmFlow/src/Recommendation.js",["108","109"],[],"/* Recommended movie page; used to display a single recommended movie and its info */\n\nimport React, { useState } from \"react\";\nimport \"./Row.css\";\n\nvar GenreVariable = 0;\nvar randompage = Math.floor(Math.random() * 200);\nvar liked_movies = [];\nconst API_IMG = \"https://image.tmdb.org/t/p/w300\";\n\nexport default function (props) {\n\n    const [movies, setMovies] = useState([]);\n\n    function getLikedMovies() {\n        fetch(\"http://localhost:5555/userInfo\", {\n            method: \"POST\",\n            crossDomain: true,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n                \"Access-Control-Allow-Origin\": \"*\",\n            },\n            body: JSON.stringify({\n                token: localStorage.getItem(\"token\"),\n            }),\n        })\n            .then((res) => res.json())\n            .then((data) => {\n                console.log(data, \"userInfo\");\n                liked_movies = data.data.movID;\n\n                countGenres();\n            });\n    }\n\n    // counting genre occurrence\n    function countGenres()\n    {\n        const genres = [];\n\n        for (var i = 0; i < liked_movies.length; i++) {\n            var list = liked_movies[i].genre_ids;\n            for (var j = 0; j < list.length; j++) {\n\n                var existingValue = genres.find(function (value) {\n                    return value.label === list[j]\n                });\n\n                if (!existingValue) {\n                    genres.push(\n                        {\n                            label: list[j],\n                            count: 1\n                        }\n                    );\n                } else {\n                    existingValue.count++;\n                }\n            }\n        }\n\n        // finding most frequent genre\n        let highest_genre = genres[0];\n        for (var k = 0; k < genres.length; k++)\n        {\n            for (var l = k; l < genres.length; l++)\n            {\n                if (genres[l].count > genres[k].count && genres[l].count > highest_genre.count)\n                {\n                    highest_genre = genres[l];\n                }\n            }\n        }\n\n        // setting genre variable to most favored genre\n        GenreVariable = highest_genre.label;\n        console.log(\"MOST LIKED GENRE ID: \" + GenreVariable);\n\n        // url for random recommended movies within the favored genre\n        let fetchUrl=`https://api.themoviedb.org/3/discover/movie?api_key=518f0cf1333524b8ec0f30f5fb0b224a&include_adult=false&with_genres=${GenreVariable}&page=${randompage}`;\n        fetch(fetchUrl).then(res => res.json()).then(data => {\n\n            //movies = data.results;\n            setMovies(data.results);\n\n        })\n    }\n        getLikedMovies();\n        return (\n            <div className=\"movie_rec_entire\">\n                {movies.slice(0,1).map((movie, index) => (\n                    <>\n                        <h1 className=\"rec_title\">{movie.title}</h1>\n                        <div className=\"rec_grid\">\n                        <img\n                            className=\"rec_poster\"\n                            key={movie.id}\n                            src={`${API_IMG}${movie.poster_path}`}\n                            alt={movie.name}\n                        ></img>\n                        <body className=\"rec_synopsis\">\n                        <h1 className=\"rec_synopsis_header\">Synopsis:</h1>\n                        <p className=\"rec_text\">{movie.overview}</p>\n                        <button className=\"next_rec\"  onClick={() => {window.location.reload()}}>\n                            Next Movie\n                        </button>\n                        </body>\n                        </div>\n                    </>\n                ))}\n            </div>\n        );\n}",{"ruleId":"110","severity":1,"message":"111","line":20,"column":30,"nodeType":"112","messageId":"113","endLine":20,"endColumn":35},{"ruleId":"114","severity":1,"message":"115","line":40,"column":25,"nodeType":"116","messageId":"117","endLine":40,"endColumn":27},{"ruleId":"118","severity":1,"message":"119","line":92,"column":18,"nodeType":"120","endLine":92,"endColumn":30},{"ruleId":"121","severity":1,"message":"122","line":8,"column":1,"nodeType":"123","endLine":17,"endColumn":2},{"ruleId":"121","severity":1,"message":"122","line":3,"column":1,"nodeType":"123","endLine":13,"endColumn":2},{"ruleId":"121","severity":1,"message":"122","line":8,"column":1,"nodeType":"123","endLine":40,"endColumn":2},{"ruleId":"110","severity":1,"message":"124","line":8,"column":5,"nodeType":"112","messageId":"113","endLine":8,"endColumn":13},{"ruleId":"125","severity":1,"message":"126","line":117,"column":13,"nodeType":"120","endLine":117,"endColumn":59},{"ruleId":"110","severity":1,"message":"127","line":3,"column":38,"nodeType":"112","messageId":"113","endLine":3,"endColumn":47},{"ruleId":"110","severity":1,"message":"124","line":11,"column":5,"nodeType":"112","messageId":"113","endLine":11,"endColumn":13},{"ruleId":"125","severity":1,"message":"126","line":122,"column":11,"nodeType":"120","endLine":122,"endColumn":61},{"ruleId":"128","severity":1,"message":"129","line":56,"column":49,"nodeType":"130","messageId":"131","endLine":58,"endColumn":18},{"ruleId":"121","severity":1,"message":"122","line":11,"column":1,"nodeType":"123","endLine":114,"endColumn":2},{"ruleId":"128","severity":1,"message":"129","line":46,"column":49,"nodeType":"130","messageId":"131","endLine":48,"endColumn":18},"no-unused-vars","'movID' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'movie_id' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'Component' is defined but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'list', 'j'.","FunctionExpression","unsafeRefs"]