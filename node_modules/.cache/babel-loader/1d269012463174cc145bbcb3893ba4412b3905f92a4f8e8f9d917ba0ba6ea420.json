{"ast":null,"code":"import React, { Component, useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nfunction UserRow(_ref) {\n  let {\n    title,\n    fetchUrl,\n    isLargeRow\n  } = _ref;\n}\n\n/*\r\nexport default class UserRow extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      movies: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"http://localhost:5555/userInfo\", {\r\n      method: \"POST\",\r\n      crossDomain: true,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n      },\r\n      body: JSON.stringify({\r\n        token: localStorage.getItem(\"token\"),\r\n      }),\r\n    })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          console.log(data, \"userInfo\");\r\n          // console.log(data.data.movID);\r\n          this.setState({ movies: data.data.movID });\r\n        });\r\n  }\r\n\r\n  render() {\r\n    const base_url = \"https://image.tmdb.org/t/p/original/\";\r\n    var title = \"User Liked Movies\";\r\n    var isLargeRow = false;\r\n\r\n    var movie_all;\r\n    var movie_id = -1;\r\n    var movie_description = \"\";\r\n    var movie_name = \"\";\r\n    var movie_poster = \"\";\r\n    const API_IMG = \"https://image.tmdb.org/t/p/w200\";\r\n\r\n    //const [show, setShow] = useState(false);\r\n    //const handleClose = this.setState({ show: this.state.show: true });\r\n    //const handleClose = () => setShow(false);\r\n\r\n    const MyInlineHook = this._renderCounter();\r\n\r\n\r\n    return (\r\n        <div className=\"row\">\r\n          <div className=\"category-header\">\r\n            <h2>{title}</h2>\r\n          </div>\r\n\r\n          <div className=\"row__posters\">\r\n            {this.state.movies.map((movie, index) => (\r\n                <>\r\n                  <img\r\n                      className={`row__poster  ${isLargeRow && \"row__posterLarge\"}`}\r\n                      key={movie.id}\r\n                      src={`${base_url}${\r\n                          isLargeRow ? movie.poster_path : movie.backdrop_path\r\n                      }`}\r\n                      alt={movie.name}\r\n                      onClick={() => {\r\n                        //this.componentDidMount();\r\n                        //movie_all = movie;\r\n                        //movie_id = movie.id;\r\n                        //movie_name = movie.title;\r\n                        //movie_description = movie.overview;\r\n                        //movie_poster = (API_IMG) + (movie.poster_path);\r\n                        //setShow(true);\r\n                        //MyInlineHook().setShow(true);\r\n\r\n\r\n                      }}\r\n                  ></img>\r\n                </>\r\n            ))}\r\n          </div>\r\n\r\n\r\n\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\n/*\r\n         <Modal className = \"movie_popup\" show={show} onHide={handleClose} >\r\n           <Modal.Header closeButton>\r\n             <Modal.Title> <b>{movie_name}</b> </Modal.Title>\r\n           </Modal.Header>\r\n           <Modal.Body>\r\n             <img classNme = \"img-fluid\" src = {movie_poster}></img>\r\n             <p>\r\n               <b> Synopsis: </b> {movie_description}\r\n             </p>\r\n           </Modal.Body>\r\n           <Modal.Footer>\r\n             <Button variant=\"secondary\" onClick={handleClose}>\r\n               Close\r\n             </Button>\r\n             <Button variant=\"danger\" onClick={() => {\r\n               setShow(false);\r\n             }}>\r\n               Unlike\r\n             </Button>\r\n           </Modal.Footer>\r\n         </Modal>\r\n\r\n*/\n_c = UserRow;\nvar _c;\n$RefreshReg$(_c, \"UserRow\");","map":{"version":3,"names":["React","Component","useState","Modal","Button","UserRow","title","fetchUrl","isLargeRow"],"sources":["/Users/chrisstatton/Documents/School/Software_Engineering/FilmFlow/FilmFlow/src/UserRow.js"],"sourcesContent":["import React, {Component, useState} from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\n\r\nfunction UserRow ({title, fetchUrl, isLargeRow}) {\r\n\r\n}\r\n\r\n/*\r\nexport default class UserRow extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      movies: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"http://localhost:5555/userInfo\", {\r\n      method: \"POST\",\r\n      crossDomain: true,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n      },\r\n      body: JSON.stringify({\r\n        token: localStorage.getItem(\"token\"),\r\n      }),\r\n    })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          console.log(data, \"userInfo\");\r\n          // console.log(data.data.movID);\r\n          this.setState({ movies: data.data.movID });\r\n        });\r\n  }\r\n\r\n  render() {\r\n    const base_url = \"https://image.tmdb.org/t/p/original/\";\r\n    var title = \"User Liked Movies\";\r\n    var isLargeRow = false;\r\n\r\n    var movie_all;\r\n    var movie_id = -1;\r\n    var movie_description = \"\";\r\n    var movie_name = \"\";\r\n    var movie_poster = \"\";\r\n    const API_IMG = \"https://image.tmdb.org/t/p/w200\";\r\n\r\n    //const [show, setShow] = useState(false);\r\n    //const handleClose = this.setState({ show: this.state.show: true });\r\n    //const handleClose = () => setShow(false);\r\n\r\n    const MyInlineHook = this._renderCounter();\r\n\r\n\r\n    return (\r\n        <div className=\"row\">\r\n          <div className=\"category-header\">\r\n            <h2>{title}</h2>\r\n          </div>\r\n\r\n          <div className=\"row__posters\">\r\n            {this.state.movies.map((movie, index) => (\r\n                <>\r\n                  <img\r\n                      className={`row__poster  ${isLargeRow && \"row__posterLarge\"}`}\r\n                      key={movie.id}\r\n                      src={`${base_url}${\r\n                          isLargeRow ? movie.poster_path : movie.backdrop_path\r\n                      }`}\r\n                      alt={movie.name}\r\n                      onClick={() => {\r\n                        //this.componentDidMount();\r\n                        //movie_all = movie;\r\n                        //movie_id = movie.id;\r\n                        //movie_name = movie.title;\r\n                        //movie_description = movie.overview;\r\n                        //movie_poster = (API_IMG) + (movie.poster_path);\r\n                        //setShow(true);\r\n                        //MyInlineHook().setShow(true);\r\n\r\n\r\n                      }}\r\n                  ></img>\r\n                </>\r\n            ))}\r\n          </div>\r\n\r\n\r\n\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\n/*\r\n         <Modal className = \"movie_popup\" show={show} onHide={handleClose} >\r\n           <Modal.Header closeButton>\r\n             <Modal.Title> <b>{movie_name}</b> </Modal.Title>\r\n           </Modal.Header>\r\n           <Modal.Body>\r\n             <img classNme = \"img-fluid\" src = {movie_poster}></img>\r\n             <p>\r\n               <b> Synopsis: </b> {movie_description}\r\n             </p>\r\n           </Modal.Body>\r\n           <Modal.Footer>\r\n             <Button variant=\"secondary\" onClick={handleClose}>\r\n               Close\r\n             </Button>\r\n             <Button variant=\"danger\" onClick={() => {\r\n               setShow(false);\r\n             }}>\r\n               Unlike\r\n             </Button>\r\n           </Modal.Footer>\r\n         </Modal>\r\n\r\n*/"],"mappings":"AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAChD,OAAOC,KAAK,MAAM,uBAAuB;AACzC,OAAOC,MAAM,MAAM,wBAAwB;AAG3C,SAASC,OAAO,OAAiC;EAAA,IAA/B;IAACC,KAAK;IAAEC,QAAQ;IAAEC;EAAU,CAAC;AAE/C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhHA,KAJSH,OAAO;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}